{"version":3,"sources":["components/RenderData.module.css","components/RenderData.js","components/CountryMenu.js","components/CountryTable.js","components/utility.js","components/FetchData.js","components/Charts.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","React","memo","data","cases","deaths","active","recovered","todayCases","todayDeaths","todayRecovered","Card","className","styles","cases_card","CardContent","Typography","variant","align","cases_data","start","end","duration","separator","color","active_card","active_data","recovered_card","recovered_data","deaths_card","deaths_data","countries","input","setInput","Select","style","width","height","marginLeft","marginTop","value","onChange","e","target","MenuItem","map","i","country","key","toLowerCase","CountryTable","Paper","sortByCases","sort","a","b","URL","fetchGlobalData","axios","get","response","updated","Date","toLocaleString","console","log","fetchCountriesData","obj","fetchCountryData","dailyLineData","day","Object","keys","values","Charts","name","useState","dayResult","setDayResult","useEffect","getDays","labels","datasets","label","backgroundColor","pointBorderColor","legend","display","title","text","toUpperCase","barData","options","Main","globalData","setGlobalData","setCountries","sortedCountries","setSortedCountries","setCountry","initial","setInitial","global","allCountries","fetchData","fetchCountry","loadingScreen","size","loading","length","CountryMenu","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f26d208d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cases_card\":\"RenderData_cases_card__2FIBC\",\"active_card\":\"RenderData_active_card__3_jBR\",\"recovered_card\":\"RenderData_recovered_card__M7Bcu\",\"deaths_card\":\"RenderData_deaths_card__1Y04R\",\"cases_data\":\"RenderData_cases_data__ncQPr\",\"active_data\":\"RenderData_active_data__RncN-\",\"recovered_data\":\"RenderData_recovered_data__14zbo\",\"deaths_data\":\"RenderData_deaths_data__3HnJo\"};","import React from \"react\";\r\nimport styles from \"./RenderData.module.css\";\r\nimport CountUp from \"react-countup\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nconst RenderData = ({ data }) => {\r\n  const {\r\n    cases,\r\n    deaths,\r\n    active,\r\n    recovered,\r\n    todayCases,\r\n    todayDeaths,\r\n    todayRecovered,\r\n  } = data;\r\n\r\n  return (\r\n    <>\r\n      <Card className={styles.cases_card}>\r\n        <CardContent>\r\n          <Typography\r\n            variant=\"body2\"\r\n            align=\"center\"\r\n            className={styles.cases_data}>\r\n            CASES\r\n          </Typography>\r\n          <Typography variant=\"h6\" align=\"center\">\r\n            <CountUp start={0} end={cases} duration={2.5} separator=\",\" />\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\" color=\"textSecondary\" align=\"center\">\r\n            Today:\r\n            <CountUp start={0} end={todayCases} duration={1.5} separator=\",\" />\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n      <Card className={styles.active_card}>\r\n        <CardContent>\r\n          <Typography\r\n            variant=\"body2\"\r\n            align=\"center\"\r\n            className={styles.active_data}>\r\n            ACTIVE\r\n          </Typography>\r\n          <Typography variant=\"h6\" align=\"center\">\r\n            <CountUp start={0} end={active} duration={2.5} separator=\",\" />\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\" color=\"textSecondary\" align=\"center\">\r\n            As of now\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n      <Card className={styles.recovered_card}>\r\n        <CardContent>\r\n          <Typography\r\n            variant=\"body2\"\r\n            align=\"center\"\r\n            className={styles.recovered_data}>\r\n            RECOVERED\r\n          </Typography>\r\n          <Typography variant=\"h6\" align=\"center\">\r\n            <CountUp start={0} end={recovered} duration={2.5} separator=\",\" />\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\" color=\"textSecondary\" align=\"center\">\r\n            Today:\r\n            <CountUp\r\n              start={0}\r\n              end={todayRecovered}\r\n              duration={1.5}\r\n              separator=\",\"\r\n            />\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n      <Card className={styles.deaths_card}>\r\n        <CardContent>\r\n          <Typography\r\n            variant=\"body2\"\r\n            align=\"center\"\r\n            className={styles.deaths_data}>\r\n            DEATHS\r\n          </Typography>\r\n          <Typography variant=\"h6\" align=\"center\">\r\n            <CountUp start={0} end={deaths} duration={2.5} separator=\",\" />\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\" color=\"textSecondary\" align=\"center\">\r\n            Today:\r\n            <CountUp start={0} end={todayDeaths} duration={1.5} separator=\",\" />\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(RenderData);\r\n","import React from \"react\";\r\nimport { Select, MenuItem } from \"@material-ui/core\";\r\n\r\nconst countryMenu = ({ countries, input, setInput }) => {\r\n  const styles = {\r\n    width: 250,\r\n    height: 35,\r\n    marginLeft: 250,\r\n    marginTop: 20,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Select\r\n        variant=\"outlined\"\r\n        style={styles}\r\n        value={input}\r\n        onChange={e => setInput(e.target.value)}>\r\n        <MenuItem value=\"WorldWide\">\r\n          <em>WorldWide</em>\r\n        </MenuItem>\r\n        {countries.map(({ country }, i) => (\r\n          <MenuItem key={i} value={country.toLowerCase()}>\r\n            {country}\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(countryMenu);\r\n","import React from \"react\";\r\nimport { Paper } from \"@material-ui/core\";\r\n\r\nconst CountryTable = ({ countries }) => {\r\n\r\n  return (\r\n    <Paper>\r\n      <div className=\"country-table\">\r\n        <tbody>\r\n          {countries.map(({ country, cases }, i) => (\r\n            <tr key={i}>\r\n              <td>{country}</td>\r\n              <td>{cases}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </div>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default CountryTable;\r\n","export const sortByCases = countries => {\r\n  const arr = [...countries];\r\n\r\n  return arr.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n","import axios from \"axios\";\r\n\r\nconst URL = \"https://disease.sh/v3/covid-19\";\r\n\r\nexport const fetchGlobalData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${URL}/all`);\r\n\r\n    const response = {\r\n      cases: data.cases,\r\n      active: data.active,\r\n      deaths: data.deaths,\r\n      recovered: data.recovered,\r\n      todayCases: data.todayCases,\r\n      todayDeaths: data.todayDeaths,\r\n      todayRecovered: data.todayRecovered,\r\n      updated: new Date(data.updated).toLocaleString(),\r\n    };\r\n\r\n    return response;\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport const fetchCountriesData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${URL}/countries`);\r\n    const response = data.map(obj => {\r\n      const {\r\n        country,\r\n        cases,\r\n        active,\r\n        deaths,\r\n        recovered,\r\n        todayCases,\r\n        todayDeaths,\r\n        todayRecovered,\r\n      } = obj;\r\n      return {\r\n        country,\r\n        cases,\r\n        active,\r\n        deaths,\r\n        recovered,\r\n        todayCases,\r\n        todayDeaths,\r\n        todayRecovered,\r\n      };\r\n    });\r\n    return response;\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport const fetchCountryData = async country => {\r\n  try {\r\n    if (country === \"WorldWide\") return fetchGlobalData();\r\n\r\n    const { data } = await axios.get(`${URL}/countries/${country}`);\r\n    const response = {\r\n      cases: data.cases,\r\n      active: data.active,\r\n      deaths: data.deaths,\r\n      recovered: data.recovered,\r\n      todayCases: data.todayCases,\r\n      todayDeaths: data.todayDeaths,\r\n      todayRecovered: data.todayRecovered,\r\n      updated: new Date(data.updated).toLocaleString(),\r\n    };\r\n\r\n    return response;\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport const dailyLineData = async () => {\r\n  const { data } = await axios.get(\r\n    \"https://disease.sh/v3/covid-19/historical/all?lastdays=215\"\r\n  );\r\n\r\n  const day = (Object.keys(data.cases));\r\n  const cases = Object.values(data.cases);\r\n  const deaths = Object.values(data.deaths);\r\n  const recovered = Object.values(data.recovered);\r\n\r\n  return { day, cases, deaths, recovered };\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport { dailyLineData } from \"./FetchData\";\r\n\r\nconst Charts = ({ countries, country, name }) => {\r\n  const [dayResult, setDayResult] = useState({});\r\n\r\n  useEffect(() => {\r\n    const getDays = async () => {\r\n      const response = await dailyLineData();\r\n      setDayResult(response);\r\n    };\r\n    getDays();\r\n  }, []);\r\n\r\n  const lineChart = () => {\r\n    const lineData = {\r\n      labels: dayResult.day,\r\n      datasets: [\r\n        {\r\n          label: \"Cases\",\r\n          data: dayResult.cases,\r\n          backgroundColor: \"rgba(23, 79, 234, 0.5)\",\r\n          pointBorderColor: \"grey\",\r\n        },\r\n        {\r\n          label: \"Recovered\",\r\n          data: dayResult.recovered,\r\n          backgroundColor: \"rgba(137, 203, 72, 0.5)\",\r\n          pointBorderColor: \"grey\",\r\n        },\r\n        {\r\n          label: \"Deaths\",\r\n          data: dayResult.deaths,\r\n          backgroundColor: \"rgba(234, 72, 23, 0.5)\",\r\n          pointBorderColor: \"grey\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    return lineData;\r\n  };\r\n\r\n  const barChart = () => {\r\n    const barData = {\r\n      labels: [\"Cases\", \"Active\", \"Recoverd\", \"Deaths\"],\r\n      datasets: [\r\n        {\r\n          label: \"People\",\r\n          backgroundColor: [\r\n            \"rgba(23, 79, 234, 0.8)\",\r\n            \"rgba(234, 178, 23, 0.8)\",\r\n            \"rgba(137, 203, 72, 0.8)\",\r\n            \"rgba(234, 72, 23, 0.8)\",\r\n          ],\r\n          data: [\r\n            country.cases,\r\n            country.active,\r\n            country.recovered,\r\n            country.deaths,\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n\r\n    const options = {\r\n      legend: { display: false },\r\n      title: {\r\n        display: true,\r\n        text: `${name.toUpperCase()}`,\r\n      },\r\n    };\r\n    return [barData, options];\r\n  };\r\n\r\n  if (name === \"WorldWide\") return <Line data={lineChart()} />;\r\n  else {\r\n    const [barData, options] = barChart();\r\n    return <Bar data={barData} options={options} />;\r\n  }\r\n};\r\n\r\nexport default Charts;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport RenderData from \"./RenderData\";\r\nimport CountryMenu from \"./CountryMenu\";\r\nimport CountryTable from \"./CountryTable\";\r\nimport { sortByCases } from \"./utility\";\r\n\r\nimport {\r\n  fetchGlobalData,\r\n  fetchCountriesData,\r\n  fetchCountryData,\r\n} from \"./FetchData\";\r\n\r\nimport { RingLoader } from \"react-spinners\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nimport \"./Main.css\";\r\nimport Charts from \"./Charts\";\r\n\r\nconst Main = () => {\r\n  // worldwide data and countries data\r\n  const [globalData, setGlobalData] = useState({});\r\n  const [countries, setCountries] = useState([]);\r\n  const [sortedCountries, setSortedCountries] = useState([]);\r\n\r\n  // Each country data and input to fetch each country\r\n  const [country, setCountry] = useState({});\r\n  const [input, setInput] = useState(\"WorldWide\");\r\n  const [initial, setInitial] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const global = await fetchGlobalData();\r\n      setGlobalData(global);\r\n\r\n      const allCountries = await fetchCountriesData();\r\n      setCountries(allCountries);\r\n      setSortedCountries(sortByCases(allCountries));\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (initial && input === \"WorldWide\") {\r\n      setCountry(globalData);\r\n      return;\r\n    }\r\n\r\n    const fetchCountry = async () => {\r\n      const response = await fetchCountryData(input);\r\n      setCountry(response);\r\n      setInitial(true);\r\n    };\r\n\r\n    fetchCountry();\r\n  }, [input, initial]);\r\n\r\n  const loadingScreen = (\r\n    <div className=\"loading-screen\">\r\n      <RingLoader size={100} color=\"orange\" loading />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {Object.keys(countries).length ? (\r\n        <div className=\"main__container\">\r\n          <div className=\"main__header\">\r\n            <header>\r\n              <div className=\"main__corona-tracker\">\r\n                <Typography variant=\"h4\" className=\"main__corona-tracker\">\r\n                  CORONA TRACKER\r\n                </Typography>\r\n              </div>\r\n              <div className=\"main__last-updated\">\r\n                <Typography variant=\"body2\">\r\n                  LAST UPDATED AT {globalData.updated}\r\n                </Typography>\r\n              </div>\r\n            </header>\r\n          </div>\r\n\r\n          <div className=\"main__body\">\r\n            <section className=\"main__section-container\">\r\n              <div className=\"main__section\">\r\n                <div className=\"main__worldwide\">\r\n                  <span className=\"main__text-worldwide\">\r\n                    <Typography color=\"secondary\" variant=\"h6\">\r\n                      WORLDWIDE\r\n                    </Typography>\r\n                  </span>\r\n                  <RenderData data={globalData} />\r\n                </div>\r\n                <div className=\"main__country\">\r\n                  <div className=\"main__country-renderdata\">\r\n                    <RenderData data={country} />\r\n                  </div>\r\n\r\n                  <CountryMenu\r\n                    countries={countries}\r\n                    input={input}\r\n                    setInput={setInput}\r\n                  />\r\n\r\n                  <div className=\"main__charts\">\r\n                    <div className=\"chart\">\r\n                      <Charts\r\n                        countries={countries}\r\n                        country={country}\r\n                        name={input}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"main__country-list\">\r\n                  <div className=\"main__country-list-case-heading\">\r\n                    <Typography color=\"secondary\" variant=\"h6\">\r\n                      HIGHEST CASES\r\n                    </Typography>\r\n                  </div>\r\n                  <CountryTable countries={sortedCountries} />\r\n                </div>\r\n              </div>\r\n            </section>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        loadingScreen\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport Main from \"./components/Main\";\r\n\r\nfunction App() {\r\n  return <Main />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}